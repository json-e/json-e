################################################################################
# ### Specificaiton for json-e
# This document specifies the json-e template language through a series of
# test cases on the form: `{title, context, template, result}`
# Where `jsone.render(template, context) = result` and title is short name
# for the test case. If `error` property is specified as `true`, no result needs
# to be specified, as the test case must throw an error.
#
# Comments explaining the test cases is encouraged, additionally entries with
# {section: '...'} is encouraged to separate sections.
#
# Test conditions:
#   1) Context is assumed to always functions:
#     - max(a, b)
#     - min(a, b)
#   2) Time at test time is expected to be '2017-01-19T16:27:20.974Z'
#   3) JSON is rendered to strings without whitespace and preserving order of
#      keys
################################################################################
---
section:  Initial Minimal Subset
---
title:    Identity
context:  {}
template: {key: [1,2,{key2: 'val', key3: 1}, true], f: false}
result:   {key: [1,2,{key2: 'val', key3: 1}, true], f: false}
---
title:    fromNow
context:  {}
template: {$fromNow: ''}
result:   '2017-01-19T16:27:20.974Z'
---
title:    fromNow 2 days 3 hours
context:  {}
template: {$fromNow: '2 days 3 hours'}
result:   '2017-01-21T19:27:20.974Z'
---
title:    fromNow built-in
context:  {}
template: {$eval: fromNow("")}
result:   '2017-01-19T16:27:20.974Z'
---
title:    fromNow built-in 2 days 3 hours
context:  {}
template: {$eval: fromNow("2 days 3 hours")}
result:   '2017-01-21T19:27:20.974Z'
---
title:    $eval
context:  {key: ['value', 1, 2, true, {}]}
template: {$eval: 'key'}
result:   ['value', 1, 2, true, {}]
---
title:    $json
context:  {}
template: {$json: [1,2,true,{},[]]}
result:   '[1,2,true,{},[]]'
---
title:    string interpolation
context:  {key: 'world', num: 1}
template: {message: 'hello ${key}', 'k-${num}': true}
result:   {message: 'hello world', 'k-1': true}
---
title:    string interpolation with object evaluation
context:  {key: 'world', num: 1}
template: {message: 'hello ${{a: "world"}.a}', 'k-${{a: 1}.a + {a: 0}.a}': true}
result:   {message: 'hello world', 'k-1': true}
---
title: multiple string interpolation (1)
context:  {a: 'hello', b: 'world'}
template: {message: '${a} ${b}'}
result:   {message: 'hello world'}
---
title: multiple string interpolation (2)
context:  {a: 'hello', b: 'world'}
template: {message: '${a}$$${b}'}
result:   {message: 'hello$$world'}
---
title: multiple string interpolation (3)
context:  {a: 'hello', b: 'world'}
template: {message: '${a}##${b}'}
result:   {message: 'hello##world'}
---
title: string interpolation escapes
context:  {}
template: {message: 'a literal \\${ in a string'}
result:   {message: 'a literal ${ in a string'}
todo: 'https://github.com/taskcluster/json-e/issues/66'
---
title: string interpolation with unbalanced }
context:  {}
template: {message: 'tricky ${"}}}}"}'}
result:   {message: 'tricky }}}}'}
---
title:    can't interpolate arrays
context:  {key: [1,2,3]}
template: {message: 'hello ${key}'}
error:    true
---
title:    can't interpolate objects
context:  {key: {}}
template: 'hello ${key}'
error:    true
---
title:    booleans interpolate
context:  {t: true, f: false}
template: '${t} or ${f}: yeast is a bacterium'
result:   'true or false: yeast is a bacterium'
---
title:    numbers interpolate
context:  {round: 3, decimal: 3.75}
template: '${round}, really ${decimal}'
result:   '3, really 3.75'
---
title:    nulls interpolate
context:  {nothing: null}
template: 'big pile of ${nothing}'
result:   'big pile of null'
todo:     'https://github.com/taskcluster/json-e/issues/65'
---
title: invalid context (1)
context: {{a:2}: 1}
error: true
---
title: invalid context (2)
context: {'a b c': 1}
error: true
################################################################################
---
section:  $if-constructs
---
title:    $if-then-else, true
context:  {cond: true}
template: {$if: 'cond', then: 1, else: 2}
result:   1
---
title:    $if-then-else, false
context:  {cond: false}
template: {$if: 'cond', then: 1, else: 2}
result:   2
---
title:    $if-then in array, true
context:  {cond: true}
template: [0, {$if: 'cond', then: 1}]
result:   [0, 1]
---
title:    $if-then in array, false
context:  {cond: false}
template: [0, {$if: 'cond', then: 1}]
result:   [0] # missing else branch should return a delete-marker
---
title:    $if-then in object, true
context:  {cond: true}
template: {key: {$if: 'cond', then: 1}, k2: 3}
result:   {key: 1, k2: 3}
---
title:    $if-then in object, false
context:  {cond: false}
template: {key: {$if: 'cond', then: 1}, k2: 3}
result:   {k2: 3} # missing else branch should return a delete-marker
---
title:    $if -> delete-marker, true
context:  {cond: true}
template: {key: {$if: 'cond'}, k2: 3}
result:   {k2: 3} # missing then/else branches should return a delete-marker
---
title:    $if -> delete-marker, false
context:  {cond: false}
template: {key: {$if: 'cond'}, k2: 3}
result:   {k2: 3} # missing then/else branches should return a delete-marker
---
title: $if->then, then => $eval, true
context: {key: {b: 1}}
template: {$if: 'true', then: {$eval: 'key'}}
result: {b: 1}
---
title: $if->else, else => $eval, false
context: {key: {b: 1}}
template: {$if: 'false', else: {$eval: 'key'}}
result: {b: 1}
---
title: $if->then, then => ${}, true
context: {key: 'one'}
template: {$if: 'true', then: '${key}'}
result: 'one'
---
title: $if->else, else => ${}, false
context: {key: 'one'}
template: {$if: 'false', else: '${key}'}
result: 'one'
---
title: $if->then, then => object, true
context: {cond: true}
template: {$if: 'cond', then: {key: 'hello world'}}
result: {key: 'hello world'}
---
title: $if->else, else => object, false
context: {cond: false}
template: {$if: 'cond', else: {key: 'hello world'}}
result: {key: 'hello world'}
---
title: $if->then, then => object, $eval, true
context: {cond: true, key: 'hello world'}
template: {$if: 'cond', then: {key: {$eval: 'key'}}}
result: {key: 'hello world'}
---
title: $if->else, else => object, $eval, false
context: {cond: false, key: 'hello world'}
template: {$if: 'cond', else: {key: {$eval: 'key'}}}
result: {key: 'hello world'}
---
title: $if->then, then => object, interpolation, true
context: {cond: true, key: 'world'}
template: {$if: 'cond', then: {key: 'hello ${key}'}}
result: {key: 'hello world'}
---
title: $if->else, else => object, interpolation, false
context: {cond: false, key: 'world'}
template: {$if: 'cond', else: {key: 'hello ${key}'}}
result: {key: 'hello world'}
---
title: $if->then->else, empty string
context: {cond: "", key: 'world'}
template: {$if: 'cond', then: "t", else: "f"}
result: f
---
title: $if->then->else, nonempty string
context: {cond: "stuff", key: 'world'}
template: {$if: 'cond', then: "t", else: "f"}
result: t
---
title: $if->then->else, string "0"  # once upon a time, this was false in PHP.. maybe still is
context: {cond: "0", key: 'world'}
template: {$if: 'cond', then: "t", else: "f"}
result: t
---
title: $if->then->else, zero
context: {cond: 0, key: 'world'}
template: {$if: 'cond', then: "t", else: "f"}
result: f
---
title: $if->then->else, one
context: {cond: 1, key: 'world'}
template: {$if: 'cond', then: "t", else: "f"}
result: t
---
title: $if->then->else, null
context: {cond: null, key: 'world'}
template: {$if: 'cond', then: "t", else: "f"}
result: f
---
title: $if->then->else, empty array
context: {cond: [], key: 'world'}
template: {$if: 'cond', then: "t", else: "f"}
result: f
todo: 'https://github.com/taskcluster/json-e/issues/68'
---
title: $if->then->else, nonempty array
context: {cond: [1, 2], key: 'world'}
template: {$if: 'cond', then: "t", else: "f"}
result: t
---
title: $if->then->else, empty object
context: {cond: {}, key: 'world'}
template: {$if: 'cond', then: "t", else: "f"}
result: f
todo: 'https://github.com/taskcluster/json-e/issues/68'
---
title: $if->then->else, nonempty object
context: {cond: {a: 2}, key: 'world'}
template: {$if: 'cond', then: "t", else: "f"}
result: t
################################################################################
---
section:  fromNow
---
title:    fromNow 1 hour
context:  {}
template: {$fromNow: '1 hour'}
result:   '2017-01-19T17:27:20.974Z'
---
title:    fromNow 2 hours
context:  {}
template: {$fromNow: '2 hours'}
result:   '2017-01-19T18:27:20.974Z'
---
title:    fromNow 3h
context:  {}
template: {$fromNow: '3h'}
result:   '2017-01-19T19:27:20.974Z'
---
title:    fromNow 1 hours
context:  {}
template: {$fromNow: '1 hours'}
result:   '2017-01-19T17:27:20.974Z'
---
title:    fromNow -1 hour
context:  {}
template: {$fromNow: '-1 hour'}
result:   '2017-01-19T15:27:20.974Z'
---
title:    fromNow 1 m
context:  {}
template: {$fromNow: '1 m'}
result:   '2017-01-19T16:28:20.974Z'
---
title:    fromNow 1m
context:  {}
template: {$fromNow: '1m'}
result:   '2017-01-19T16:28:20.974Z'
---
title:    fromNow 12 min
context:  {}
template: {$fromNow: '12 min'}
result:   '2017-01-19T16:39:20.974Z'
---
title:    fromNow 12min
context:  {}
template: {$fromNow: '12min'}
result:   '2017-01-19T16:39:20.974Z'
---
title:    fromNow 11m
context:  {}
template: {$fromNow: '11m'}
result:   '2017-01-19T16:38:20.974Z'
---
title:    fromNow 11 m
context:  {}
template: {$fromNow: '11 m'}
result:   '2017-01-19T16:38:20.974Z'
---
title:    fromNow 1 day
context:  {}
template: {$fromNow: '1 day'}
result:   '2017-01-20T16:27:20.974Z'
################################################################################
---
section:  $json
---
title:    wrap expressions with $eval
context:  {a: 1, b: 2}
template: {$json: {$eval: 'a + b + 7'}}
result:   '10'
---
title:    unwrap expressions not evaluated
context:  {a: 1, b: 2}
template: {$json: 'a + b + 7'}
result:   '"a + b + 7"'
---
title:    $eval inside array
context:  {a: 1, b: 2}
template: {$json: [2, 5, {$eval: 'a + b + 7'}]}
result:   '[2,5,10]'
################################################################################
---
section: accessing nested objects => context
---
title: $eval
context:  {key: {key2: ['value', 1, 2, true, {}]}}
template: {$eval: 'key.key2'}
result:   ['value', 1, 2, true, {}]
---
title:    $json
context:  {key: {key2: [1,2,true,{},[]]}}
template: {$json: {$eval: 'key.key2'}}
result:   '[1,2,true,{},[]]'
---
title: string interpolation
context: {key: {key2: 'world', key3: 1}}
template: {message: 'hello ${key.key2}', 'k-${key.key3}': true}
result:   {message: 'hello world', 'k-1': true}
################################################################################
---
section:  $map
---
title:    simple map
context:  {a: 1}
template:
  $map: [2, 4, 6]
  each(x): {$eval: 'x + a'}
result:   [3, 5, 7]
---
title:    map to objects
context:  {a: 1}
template:
  $map: [2, 4, 6]
  each(x):
    asText: '${x + a}'
    integer: {$eval: 'x + a'}
result:
 - {asText: '3', integer: 3}
 - {asText: '5', integer: 5}
 - {asText: '7', integer: 7}
---
title:    complex identifier
context:  {a: 1}
template:
  $map: [2, 4, 6]
  each(my_identifier97): {$eval: 'my_identifier97 + a'}
result:   [3, 5, 7]
---
title:    must wrap expressions with $eval
context:  {a: 1}
template:
  $map: [2, 4, 6]
  each(my_identifier97): 'my_identifier97 + a'
result:   ['my_identifier97 + a', 'my_identifier97 + a', 'my_identifier97 + a']
---
title:    can take from objects
context:  {a: 1}
template:
  $map: [{k: 1}, {k: 2}, {k: 3}]
  each(y): {$eval: 'y.k'}
result:   [1, 2, 3]
---
title:    can make objects too
context:  {a: 1}
template:
  $map: [{k: 1}, {k: 2}, {k: 3}]
  each(y):
    k: {$eval: 'y.k + 1'}
    v: 'before=${y.k}'
result:
  - k: 2
    v: 'before=1'
  - k: 3
    v: 'before=2'
  - k: 4
    v: 'before=3'
---
title:    respects delete-marker from $if
context:  {a: 1}
template:
  $map: [{k: 1}, {k: 2}, {k: 3}]
  each(y):
    $if: 'y.k != 2'
    then: {$eval: 'y.k'}
result: [1, 3]
---
title:    $map requires an array
context:  {}
template:
  $map: {a: 1, b: 2, c: 3}
  each(y): {$eval: 'y.k'}
error: true # can't do map on non-arrays
################################################################################
---
section:  $sort
---
title:    simple sort
context:  {}
template: {$sort: [3, 4, 1, 2]}
result:   [1, 2, 3, 4]
---
title:    simple sort with $eval
context:  {array: [3, 4, 1, 2]}
template: {$sort: {$eval: 'array'}}
result:   [1, 2, 3, 4]
---
title:    sort by
context:  {}
template:
  $sort: [{a: 2}, {a: 1, b: []}, {a: 3}]
  by(x): 'x.a'
result:   [{a: 1, b: []}, {a: 2}, {a: 3}]
---
title:    cannot sort objects without by
context:  {}
template:
  $sort: [{a: 2}, {a: 1, b: []}, {a: 3}]
error: true  # list of objects must have a 'by(x)' property
---
title:    cannot sort arrays without by
context:  {}
template:
  $sort: [[1,2,3], [4,5], [], [8,9,10]]
error: true  # list of arrays must have a 'by(x)' property
---
title:    sort requires an array (string)
context:  {}
template:
  $sort:  "some string"
error: true  # $sort must be given an array
---
title:    sort requires an array (number)
context:  {}
template:
  $sort:  34
error: true  # $sort must be given an array
---
title:    sort requires an array (object)
context:  {}
template:
  $sort:  {k: 1, b: 4, x: 8}
error: true  # $sort must be given an array
################################################################################
---
section:  $reverse
---
title:    simple reverse
context:  {}
template: {$reverse: [3, 4, 1, 2]}
result:   [2, 1, 4, 3]
---
title:    simple reverse with $eval
context:  {key: [3, 4, 1, 2]}
template: {$reverse: {$eval: 'key'}}
result:   [2, 1, 4, 3]
---
title:    simple reverse + $sort # with this we can sort in reverse order
context:  {}
template: {$reverse: {$sort: [3, 4, 1, 2]}}
result:   [4, 3, 2, 1]
################################################################################
---
section: builtins
---
title: min (1)
context: {key1: 1, key2: 2}
template: {$eval: 'min(key1, key2)'}
result: 1
---
title: min (2)
context: {key1: 1, key2: 2}
template: {$eval: 'min(1, key2)'}
result: 1
---
title: min (3)
context: {key1: 1, key2: 2}
template: {$eval: 'min(key1, 2)'}
result: 1
---
title: min (4)
context: {key1: 1, key2: 2}
template: {$eval: 'min(1, 2)'}
result: 1
---
title: min (5)
context: {key1: 1, key2: 2}
template: {$eval: 'min(2, 1)'}
result: 1
---
title: min (6)
context: {key1: 1, key2: 2}
template: {$eval: 'min(2, 1, 3, 4, 5)'}
result: 1
---
title: max (1)
context: {key1: 1, key2: 2}
template: {$eval: 'max(key1, key2)'}
result: 2
---
title: max (2)
context: {key1: 1, key2: 2}
template: {$eval: 'max(1, key2)'}
result: 2
---
title: max (3)
context: {key1: 1, key2: 2}
template: {$eval: 'max(key1, 2)'}
result: 2
---
title: max (4)
context: {key1: 1, key2: 2}
template: {$eval: 'max(1, 2)'}
result: 2
---
title: max (5)
context: {key1: 1, key2: 2}
template: {$eval: 'max(2, 1)'}
result: 2
---
title: max (6)
context: {key1: 1, key2: 2}
template: {$eval: 'max(2, 1, 3, 4, 5)'}
result: 5
---
title: sqrt (1)
context: {key: 4}
template: {$eval: 'sqrt(key)'}
result: 2
---
title: sqrt (2)
context: {key: 4}
template: {$eval: 'sqrt(key)'}
result: 2.0
---
title: sqrt (3)
context: {}
template: {$eval: 'sqrt(9)'}
result: 3
---
title: sqrt (3)
context: {}
template: {$eval: 'sqrt(9)'}
result: 3.0
---
title: ceil (1)
context: {key: 1.1}
template: {$eval: 'ceil(key)'}
result: 2
---
title: ceil (2)
context: {key: 1.1}
template: {$eval: 'ceil(key)'}
result: 2.0
---
title: ceil (3)
context: {}
template: {$eval: 'ceil(2.003)'}
result: 3
---
title: ceil (4)
context: {}
template: {$eval: 'ceil(2.003)'}
result: 3.0
---
title: ceil (5)
context: {key: 1}
template: {$eval: 'ceil(key)'}
result: 1
---
title: ceil (6)
context: {key: 1}
template: {$eval: 'ceil(key)'}
result: 1.0
---
title: ceil (7)
context: {key: 1.0}
template: {$eval: 'ceil(key)'}
result: 1
---
title: ceil (8)
context: {key: 1.0}
template: {$eval: 'ceil(key)'}
result: 1.0
---
title: floor (1)
context: {key: 1.1}
template: {$eval: 'floor(key)'}
result: 1
---
title: floor (2)
context: {key: 1.1}
template: {$eval: 'floor(key)'}
result: 1.0
---
title: floor (3)
context: {}
template: {$eval: 'floor(2.003)'}
result: 2
---
title: floor (4)
context: {}
template: {$eval: 'floor(2.003)'}
result: 2.0
---
title: floor (5)
context: {key: 1}
template: {$eval: 'floor(key)'}
result: 1
---
title: floor (6)
context: {key: 1}
template: {$eval: 'floor(key)'}
result: 1.0
---
title: floor (7)
context: {key: 1.0}
template: {$eval: 'floor(key)'}
result: 1
---
title: floor (8)
context: {key: 1.0}
template: {$eval: 'floor(key)'}
result: 1.0
---
title: abs (1)
context: {key: -1.1}
template: {$eval: 'abs(key)'}
result: 1.1
---
title: abs (2)
context: {}
template: {$eval: 'abs(-1.1)'}
result: 1.1
---
title: abs (3)
context: {key: -1}
template: {$eval: 'abs(key)'}
result: 1
---
title: abs (4)
context: {key: -1}
template: {$eval: 'abs(key)'}
result: 1.0
---
title: abs (5)
context: {key: -1.0}
template: {$eval: 'abs(key)'}
result: 1
---
title: abs (6)
context: {key: -1.0}
template: {$eval: 'abs(key)'}
result: 1.0
---
title: abs (7)
context: {}
template: {$eval: 'abs(-1)'}
result: 1
---
title: abs (8)
context: {}
template: {$eval: 'abs(-1)'}
result: 1.0
---
title: abs (9)
context: {}
template: {$eval: 'abs(-1.0)'}
result: 1
---
title: abs (10)
context: {}
template: {$eval: 'abs(-1.0)'}
result: 1.0
---
title: abs (11)
context: {key: 1.1}
template: {$eval: 'abs(key)'}
result: 1.1
---
title: abs (12)
context: {}
template: {$eval: 'abs(1.1)'}
result: 1.1
---
title: abs (13)
context: {key: 1}
template: {$eval: 'abs(key)'}
result: 1
---
title: abs (14)
context: {key: 1}
template: {$eval: 'abs(key)'}
result: 1.0
---
title: abs (15)
context: {key: 1.0}
template: {$eval: 'abs(key)'}
result: 1
---
title: abs (16)
context: {key: 1.0}
template: {$eval: 'abs(key)'}
result: 1.0
---
title: abs (17)
context: {}
template: {$eval: 'abs(1)'}
result: 1
---
title: abs (18)
context: {}
template: {$eval: 'abs(1)'}
result: 1.0
---
title: abs (19)
context: {}
template: {$eval: 'abs(1.0)'}
result: 1
---
title: abs (20)
context: {}
template: {$eval: 'abs(1.0)'}
result: 1.0
---
title: lowercase (1)
context: {key: 'HEllo'}
template: {$eval: 'lowercase(key)'}
result: 'hello'
---
title: lowercase (2)
context: {}
template: {$eval: 'lowercase("HEllo")'}
result: 'hello'
---
title: TypeError lowercase (1)
context: {key: {}}
template: {$eval: 'lowercase(key)'}
error: true
---
title: TypeError lowercase (2)
context: {}
template: {$eval: 'lowercase({})'}
error: true
---
title: TypeError lowercase (3)
context: {key: []}
template: {$eval: 'lowercase(key)'}
error: true
---
title: TypeError lowercase (4)
context: {}
template: {$eval: 'lowercase([])'}
error: true
---
title: TypeError lowercase (5)
context: {key: 1}
template: {$eval: 'lowercase(key)'}
error: true
---
title: TypeError lowercase (6)
context: {}
template: {$eval: 'lowercase(1)'}
error: true
---
title: uppercase (1)
context: {key: 'HEllo'}
template: {$eval: 'uppercase(key)'}
result: 'HELLO'
---
title: uppercase (2)
context: {}
template: {$eval: 'uppercase("HEllo")'}
result: 'HELLO'
---
title: TypeError uppercase (1)
context: {key: {}}
template: {$eval: 'uppercase(key)'}
error: true
---
title: TypeError uppercase (2)
context: {}
template: {$eval: 'uppercase({})'}
error: true
---
title: TypeError uppercase (3)
context: {key: []}
template: {$eval: 'uppercase(key)'}
error: true
---
title: TypeError uppercase (4)
context: {}
template: {$eval: 'uppercase([])'}
error: true
---
title: TypeError uppercase (5)
context: {key: 1}
template: {$eval: 'uppercase(key)'}
error: true
---
title: TypeError uppercase (6)
context: {}
template: {$eval: 'uppercase(1)'}
error: true
---
title: len (1)
context: {key: [1,2,3]}
template: {$eval: 'len(key)'}
result: 3
---
title: len (2)
context: {key: [1,2,3]}
template: {$eval: 'len([1, 2, 3])'}
result: 3
---
title: len (3)
context: {key: 'abc'}
template: {$eval: 'len(key)'}
result: 3
---
title: len (4)
context: {key: [1,2,3]}
template: {$eval: 'len("abc")'}
result: 3
---
title: TypeError len (1)
context: {key: {}}
template: {$eval: 'len(key)'}
error: true
---
title: TypeError len (2)
context: {}
template: {$eval: 'len({})'}
error: true
---
title: TypeError len (3)
context: {key: 1}
template: {$eval: 'len(key)'}
error: true
---
title: TypeError len (4)
context: {}
template: {$eval: 'len(1)'}
error: true
---
title: str (1)
context: {key: 1}
template: {$eval: 'str(key)'}
result: '1'
---
title: str (2)
context: {}
template: {$eval: 'str(1)'}
result: '1'
---
title: str (3)
context: {key: 'hello'}
template: {$eval: 'str(key)'}
result: 'hello'
---
title: str (4)
context: {}
template: {$eval: 'str("hello")'}
result: 'hello'
---
title: str (3)
context: {key: 'hello'}
template: {$eval: 'str(key)'}
result: 'hello'
---
title: str (4)
context: {}
template: {$eval: 'str("hello")'}
result: 'hello'
---
title: str (5)
context: {key: true}
template: {$eval: 'str(key)'}
result: 'true'
---
title: str (6)
context: {}
template: {$eval: 'str(true)'}
result: 'true'
---
title: str (7)
context: {key: false}
template: {$eval: 'str(key)'}
result: 'false'
---
title: str (8)
context: {}
template: {$eval: 'str(false)'}
result: 'false'
---
title: str (9)
context: {key: [1, 2, 3]}
template: {$eval: 'str(key)'}
result: '1,2,3'
---
title: str (10)
context: {}
template: {$eval: 'str([1, 2, 3])'}
result: '1,2,3'
---
title: override builtin (1), uppercase
context: {uppercase: 1}
template: {$eval: 'uppercase + 1'}
result: 2
---
title: override builtin (2), min
context: {min: 'hello world!'}
template: {$eval: 'min'}
result: 'hello world!'
################################################################################
---
section:  expression language - basics
---
title:    decimal literal
context:  {}
template: {$eval: '10.5'}
result:   10.5
---
title:    addition
context:  {a: 1, b: 2}
template: {$eval: 'a + b + 7'}
result:   10
---
title:    multiplication
context:  {a: 3, b: 2}
template: {$eval: 'a * b * 3'}
result:   18
---
title:    string concatenation
context:  {a: 3, b: 2}
template: {$eval: '"a" + "b"'}
result:   'ab'
---
title:    $eval must take string
context:  {a: 3, b: 2}
template: {$eval: ['a', 'b']}
error:    true
---
title: array access [index]
context: {a: [1,2,3,4]}
template: {$eval: 'a[0]'}
result: 1
---
title: array access [index]
context: {a: [1,2,3,4]}
template: {$eval: 'a[2]'}
result: 3
---
title: array access [-index]
context: {a: [1,2,3,4]}
template: {$eval: 'a[-1]'}
result: 4
---
title: array access [-index]
context: {a: [1,2,3,4]}
template: {$eval: 'a[-2]'}
result: 3
---
title: array slicing [begin:end], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[0:2]'}
result: [1,2]
---
title: array slicing [begin:], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[0:]'}
result: [1,2,3,4]
---
title: array slicing [begin:], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[1:]'}
result: [2,3,4]
---
title: array slicing [-begin:], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[-3:]'}
result: [2,3,4]
---
title: array slicing [-begin:-end], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[-3:-1]'}
result: [2,3]
---
title: array slicing [:end], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[:3]'}
result: [1,2,3]
---
title: array slicing [:-end], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[:-2]'}
result: [1,2]
---
title: function min(contextValue, contextValue)
context: {a: 1, b: 2}
template: {$eval: 'min(a, b)'}
result: 1
---
title: function max(contextValue, contextValue)
context: {a: 1, b: 2}
template: {$eval: 'max(a, b)'}
result: 2
---
title: function min(contextValue, value)
context: {a: 1, b: 2}
template: {$eval: 'min(a, -1)'}
result: -1
---
title: function max(contextValue, value)
context: {a: 1, b: 2}
template: {$eval: 'max(a, 3)'}
result: 3
################################################################################
---
section: expression language - arithemtic
---
title: 'addition'
context: {a: 1, b: 2}
template: {$eval: 'a + b + 7'}
result: 10
---
title: 'multiplication'
context: {a: 3, b: 2}
template: {$eval: 'a * b * 3'}
result: 18
---
title: 'division (1)'
context: {a: 3, b: 2}
template: {$eval: 'a / b'}
result: 1.5
---
title: 'division (2)'
context: {a: 3.0, b: 2.0}
template: {$eval: 'a / b'}
result: 1.5
---
title: 'division (3)'
context: {a: 3, b: 2}
template: {$eval: 'b / a'}
result: 0.6666666666666666
---
title: 'division (4)'
context: {a: 3.0, b: 2.0}
template: {$eval: 'b / a'}
result: 0.6666666666666666
---
title: 'exponentiation (1)'
context: {a: 2, b: 3}
template: {$eval: 'a ** b'}
result: 8
---
title: 'exponentiation (2)'
context: {a: 2, b: 3}
template: {$eval: 'a ** b + 2'}
result: 10
---
title: 'exponentiation (3)'
context: {a: 2, b: 3}
template: {$eval: 'a ** b * 2'}
result: 16
---
title: 'exponentiation (4)'
context: {a: 2, b: 3}
template: {$eval: 'a * a ** b'}
result: 16
---
title: 'exponentiation, right associativity (1)'
context: {a: 2, b: 3}
template: {$eval: 'a ** a ** b == a ** (a ** b)'}
result: true
---
title: 'exponentiation, right associativity (2)'
context: {a: 2, b: 3}
template: {$eval: 'a ** a ** b'}
result: 256
---
title: 'exponentiation, right associativity (3)'
context: {a: 2, b: 3}
template: {$eval: '2 ** 2 ** 3 == 2 ** (2 ** 3)'}
result: true
---
title: 'exponentiation, right associativity (4)'
context: {a: 2, b: 3}
template: {$eval: '2 ** 2 ** 3'}
result: 256
---
title: 'TypeError: exponentiation (1)'
context: {a: 'hello', b: 2}
template: {$eval: 'a ** b'}
error: true
---
title: 'TypeError: exponentiation (2)'
context: {a: 'hello', b: 2}
template: {$eval: 'b ** a'}
error: true
---
title: 'TypeError: exponentiation (3)'
context: {a: 'hello', b: 2}
template: {$eval: '"hello" ** b'}
error: true
---
title: 'TypeError: exponentiation (4)'
context: {a: 'hello', b: 2}
template: {$eval: 'b ** "hello"'}
error: true
---
title: 'TypeError: exponentiation (5)'
context: {a: 'hello', b: 2}
template: {$eval: '2 ** "hello"'}
error: true
################################################################################
---
section: expression language - logic
---
title: 'logical not (1)'
context: {tt: true, ff: false}
template: {$eval: '!tt'}
result: false
---
title: 'logical not (2)'
context: {tt: true, ff: false}
template: {$eval: '!ff'}
result: true
---
title: 'or operator (1)'
context: {tt: true, ff: false}
template: {$eval: 'tt || ff'}
result: true
---
title: 'or operator (2)'
context: {tt: true, ff: false}
template: {$eval: 'tt || ff'}
result: true
---
title: 'or operator (3)'
context: {tt: true, ff: false}
template: {$eval: 'ff || tt'}
result: true
---
title: 'or operator (4)'
context: {tt: true, ff: false}
template: {$eval: 'ff || ff'}
result: false
---
title: 'and operator (1)'
context: {tt: true, ff: false}
template: {$eval: 'tt && tt'}
result: true
---
title: 'and operator (2)'
context: {tt: true, ff: false}
template: {$eval: 'tt && ff'}
result: false
---
title: 'and operator (3)'
context: {tt: true, ff: false}
template: {$eval: 'ff && tt'}
result: false
---
title: 'and operator (4)'
context: {tt: true, ff: false}
template: {$eval: 'ff && ff'}
result: false
---
title: 'and operator with not operator'
context: {tt: true, ff: false}
template: {$eval: 'tt && !ff'}
result: true
---
title: 'or operator with not operator'
context: {tt: true, ff: false}
template: {$eval: 'ff || !ff'}
result: true
---
title: 'complex logical operation (1)'
context: {}
template: {$eval: "4 < 6 && 2 == 1 + 1"}
result: true
---
title: 'complex logical operation (2)'
context: {}
template: {$eval: "!(4 < 6) && 2 == 1 + 1"}
result: false
---
title: 'complex logical operation (3)'
context: {}
template: {$eval: "2 == 1 + 1 && 4 < 6"}
result: true
---
title: 'complex logical operation (4)'
context: {}
template: {$eval: "4 >= 6 || 2 == 1 + 1"}
result: true
################################################################################
---
section: expression language - string operations
---
title: 'string concatenation (1)'
context: {a: 3, b: 2}
template: {$eval: '"a" + "b"'}
result: 'ab'
---
title: 'TypeError: string + number (1)'
context: {a: 3, b: 2}
template: {$eval: '"a" + b'}
error: true
---
title: 'TypeError: string + number (2)'
context: {a: 3, b: 2}
template: {$eval: '"" + a + b'}
error: true
---
title: 'TypeError: string + number (3)'
context: {a: 3, b: 2}
template: {$eval: '"" + (a + b)'}
error: true
---
title: 'TypeError: number + string (4)'
context: {a: 3, b: 2}
template: {$eval: '(a + b) + "abc"'}
error: true
---
title: 'string indexing (1)'
context: {key: '12345'}
template: {$eval: 'key[1]'}
result: '2'
---
title: 'string indexing (2)'
context: {key: '12345'}
template: {$eval: 'key[-2]'}
result: '4'
---
title: 'string indexing (3)'
context: {}
template: {$eval: '"12345"[1]'}
result: '2'
---
title: 'string indexing (4)'
context: {}
template: {$eval: '"12345"[-2]'}
result: '4'
---
title: 'string indexing (noninteger)'
context: {}
template: {$eval: '"12345"[2.5]'}
todo: 'https://github.com/taskcluster/json-e/issues/64'
---
title: 'string slicing (1)'
context: {key: '12345'}
template: {$eval: 'key[1:-1]'}
result: '234'
---
title: 'string slicing (2)'
context: {key: '12345'}
template: {$eval: 'key[-2:]'}
result: '45'
---
title: 'string slicing (noninteger first index)'
context: {key: '12345'}
template: {$eval: 'key[1.5:3]'}
todo: 'https://github.com/taskcluster/json-e/issues/64'
---
title: 'string slicing (noninteger second index)'
context: {key: '12345'}
template: {$eval: 'key[1:3.5]'}
todo: 'https://github.com/taskcluster/json-e/issues/64'
---
title: 'string slicing (noninteger indexes)'
context: {key: '12345'}
template: {$eval: 'key[1.5:3.5]'}
todo: 'https://github.com/taskcluster/json-e/issues/64'
---
title: 'string slicing type error (1)'
context: {key: '12345'}
template: {$eval: 'key["a":]'}
error: true
---
title: 'string slicing type error (2)'
context: {key: '12345'}
template: {$eval: 'key[:"a"]'}
error: true
---
title: 'string length attribute'
context: {key: '12345'}
template: {$eval: 'key.length'}
result: 5
todo: 'https://github.com/taskcluster/json-e/issues/63'
---
title: 'other string attributes are not set'
context: {key: 'abc'}
template: {$eval: 'key.toUpperCase()'}
error: true
todo: 'https://github.com/taskcluster/json-e/issues/63'
################################################################################
---
section: expression language - property access
---
title: 'property with numeric value'
context: {key: 1}
template: {$eval: 'key'}
result: 1
---
title: 'property with string value'
context: {key: 'a'}
template: {$eval: 'key'}
result: 'a'
---
title: 'property with boolean value'
context: {key: true}
template: {$eval: 'key'}
result: true
---
title: 'property with object value'
context: {key: {a: 1}}
template: {$eval: 'key'}
result: {a: 1}
---
title: 'nested property access with object value'
context: {key: {key2: {key3: {a: 1}}}}
template: {$eval: 'key.key2.key3'}
result: {a: 1}
---
title: 'nested property access with numeric value'
context: {key: {key2: {key3: 1}}}
template: {$eval: 'key["key2"]["key3"]'}
result: 1
---
title: 'property access with expression value'
context: {key: abc, values: {abc: 2, def: 3}}
template: {$eval: 'values[key]'}
result: 2
################################################################################
---
section: expression language - array access
---
title: 'numeric'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[0]'}
result: 1
---
title: 'numeric, nonzero index'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[2]'}
result: 3
---
title: 'numeric, noninteger index'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[2.5]'}
todo: 'https://github.com/taskcluster/json-e/issues/64'
---
title: 'arithemtic with results'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[0] + key[1] + key[2] + key[3] + key[4]'}
result: 15
---
title: 'string index'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key["a"]'}
error: true
---
title: 'nested, in property accesses'
context: {key: {key2: {key3: [1,2,3,4,5]}}}
template: {$eval: 'key.key2.key3[0]'}
result: 1
---
title: 'nested, in property access by string'
context: {key: {key2: {key3: [1,2,3,4,5]}}}
template: {$eval: 'key["key2"]["key3"][0]'}
result: 1
---
title: 'nested, nonzero index'
context: {key: {key2: {key3: [1,2,3,4,5]}}}
template: {$eval: 'key.key2.key3[2]'}
result: 3
---
title: 'nested, nonzero index, in property access by string'
context: {key: {key2: {key3: [1,2,3,4,5]}}}
template: {$eval: 'key["key2"]["key3"][2]'}
result: 3
---
title: 'nested, with arithmetic'
context: {key: {key2: {key3: [1,2,3,4,5]}}}
template: {$eval: 'key.key2.key3[0] + key.key2.key3[1] + key.key2.key3[2] + key.key2.key3[3] + key.key2.key3[4]'}
result: 15
---
title: 'nested, with arithmetic, in property access by string'
context: {key: {key2: {key3: [1,2,3,4,5]}}}
template: {$eval: 'key["key2"]["key3"][0] + key["key2"]["key3"][1] + key["key2"]["key3"][2] + key["key2"]["key3"][3] + key["key2"]["key3"][4]'}
result: 15
---
title: 'array length'
context: {key: [1, 3, 5]}
template: {$eval: 'key.length'}
result: 3
---
title: 'other array attributes are not available'
context: {key: [5, 3, 1]}
template: {$eval: 'key.sort'}
error: true
################################################################################
---
section: expression language - array slicing
---
title: 'array slicing (full slice)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[0:5]'}
result: [1,2,3,4,5]
---
title: 'array slicing (prefix)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[0:3]'}
result: [1,2,3]
---
title: 'array slicing (negative indices)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[-5:-1]'}
result: [1,2,3,4]
---
title: 'array slicing (noninteger first index)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[2.5: 4]'}
todo: 'https://github.com/taskcluster/json-e/issues/64'
---
title: 'array slicing (noninteger last index)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[2: 3.5]'}
todo: 'https://github.com/taskcluster/json-e/issues/64'
---
title: 'array slicing (noninteger indexes)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[2.5: 3.5]'}
todo: 'https://github.com/taskcluster/json-e/issues/64'
---
title: 'array slicing (no end index)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[-4:]'}
result: [2,3,4,5]
---
title: 'array slicing (no start index)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[:-3]'}
result: [1,2]
---
title: 'array slicing type error (1)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key["a":]'}
error: true
---
title: 'array slicing type error (2)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[:"a"]'}
error: true
---
title: 'array slicing type error (3)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key["a":"b"]'}
error: true
---
title: 'array slicing type error (4)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key[1:"a"]'}
error: true
---
title: 'array slicing type error (5)'
context: {key: [1,2,3,4,5]}
template: {$eval: 'key["a":2]'}
error: true
################################################################################
---
section: expression language - function calls
---
title: 'function call (1)'
context: {a: 3, b: 2}
template: {$eval: 'min(a, b)'}
result: 2
---
title: 'function call (2)'
context: {a: 3, b: 2}
template: {$eval: 'min(3, b)'}
result: 2
---
title: 'function call (3)'
context: {a: 3, b: 2}
template: {$eval: 'min(a, 2)'}
result: 2
---
title: 'function call (4)'
context: {a: 3, b: 2}
template: {$eval: 'min(3, 2)'}
result: 2
---
title: 'function call (5)'
context: {a: 3, b: 2}
template: {$eval: 'max(a, b)'}
result: 3
---
title: 'function call (6)'
context: {a: 3, b: 2}
template: {$eval: 'max(3, b)'}
result: 3
---
title: 'function call (7)'
context: {a: 3, b: 2}
template: {$eval: 'max(a, 2)'}
result: 3
---
title: 'function call (8)'
context: {a: 3, b: 2}
template: {$eval: 'max(3, 2)'}
result: 3
---
title: 'function call (9)'
context: {a: 3, b: 2}
template: {$eval: 'min(a, b) + max(a, b)'}
result: 5
---
title: 'function call (10)'
context: {a: 3, b: 2}
template: {$eval: 'min(3, b) + max(3, b)'}
result: 5
---
title: 'function call (11)'
context: {a: 3, b: 2}
template: {$eval: 'min(a, 2) + max(a, 2)'}
result: 5
---
title: 'function call (12)'
context: {a: 3, b: 2}
template: {$eval: 'min(3, 2) + max(3, 2)'}
result: 5
################################################################################
---
section: expression language - in operator
---
title: 'in operator on string, success (1)'
context: {}
template: {$eval: '"abc" in "aabc"'}
result: true
---
title: 'in operator on string, failure (2)'
context: {}
template: {$eval: '"efg" in "aabc"'}
result: false
---
title: 'in operator on string, success (3)'
context: {key: 'aabc'}
template: {$eval: '"abc" in key'}
result: true
---
title: 'in operator on string, failure (4)'
context: {key: 'aabc'}
template: {$eval: '"efg" in key'}
result: false
---
title: 'in operator on string, failure (5)'
context: {key: 'aabc'}
template: {$eval: '"2" in key'}
result: false
---
title: 'in operator on array, success (1)'
context: {}
template: {$eval: '"abc" in [1, "abc", "def"]'}
result: true
---
title: 'in operator on array, success (2)'
context: {}
template: {$eval: '1 in [1, "abc", "def"]'}
result: true
---
title: 'in operator on array, success (3)'
context: {key: [1, 'abc', 'def']}
template: {$eval: '"abc" in key'}
result: true
---
title: 'in operator on array, success (3)'
context: {key: [1, 'abc', 'def']}
template: {$eval: '1 in key'}
result: true
---
title: 'in operator on array, failure (1)'
context: {}
template: {$eval: '"efg" in [1, "abc", "def"]'}
result: false
---
title: 'in operator on array, failure (2)'
context: {}
template: {$eval: '2 in [1, "abc", "def"]'}
result: false
---
title: 'in operator on array, failure (2)'
context: {key: [1, 'abc', 'def']}
template: {$eval: '"efg" in key'}
result: false
---
title: 'in operator on array, failure (4)'
context: {key: [1, 'abc', 'def']}
template: {$eval: '2 in key'}
result: false
---
title: 'in operator on object, success (1)'
context: {}
template: {$eval: '"a" in {"a": 1, b: 2}'}
result: true
---
title: 'in operator on object, success (2)'
context: {key: {a: 1, b: 2}}
template: {$eval: '"a" in key'}
result: true
---
title: 'in operator on object, success (3)'
context: {}
template: {$eval: '"3.4" in {"3.4": 1, "b": 2}'}
result: true
---
title: 'in operator on object, failure (1)'
context: {}
template: {$eval: '"c" in {a: 1, "b": 2}'}
result: false
---
title: 'in operator on object, failure (2)'
context: {key: {a: 1, b: 2}}
template: {$eval: '"c" in key'}
result: false
---
title: 'in operator on object, failure (3)'
context: {}
template: {$eval: '"a" in {"3": 1, "b": 2}'}
result: false
---
title: 'in operator on object, failure (4)'
context: {}
template: {$eval: '"3.4" in {"3": 1, "b": 2}'}
result: false
---
title: 'TypeError: in operator on Object, error (1)'
context: {key: {a: 1, b: 2}}
template: {$eval: '[] in key'}
error: true
---
title: 'TypeError: in operator on Object, error (2)'
context: {key: {a: 1, b: 2}}
template: {$eval: '{} in key'}
error: true
---
title: 'TypeError: in operator on Object, error (3)'
context: {key: {a: 1, b: 2}}
template: {$eval: '1 in key'}
error: true
---
title: 'TypeError: in operator on Array, error (1)'
context: {key: [2,3,4]}
template: {$eval: '[] in key'}
error: true
---
title: 'TypeError: in operator on String, error (1)'
context: {key: 'hello world!'}
template: {$eval: '[] in key'}
error: true
---
title: 'TypeError: in operator on String, error (2)'
context: {key: 'hello world!'}
template: {$eval: '{} in key'}
error: true
---
title: 'TypeError: in operator on String, error (3)'
context: {key: 'hello world!'}
template: {$eval: '1 in key'}
error: true
---
title: 'TypeError: in operator on Array, error (2)'
context: {key: [2,3,4]}
template: {$eval: '{} in key'}
error: true
################################################################################
---
section: expression language - comparisons
---
title: 'equality (1)'
context: {a: 1, b: 1}
template: {$eval: '1 == 1'}
result: true
---
title: 'equality (2)'
context: {a: 1, b: 1}
template: {$eval: '1 == 2'}
result: false
---
title: 'equality (3)'
context: {a: 1, b: 1}
template: {$eval: 'a == b'}
result: true
---
title: 'equality (4)'
context: {a: 1, b: 2}
template: {$eval: 'a == b'}
result: false
---
title: 'in-equality (1)'
context: {a: 1, b: 1}
template: {$eval: '1 != 1'}
result: false
---
title: 'in-equality (2)'
context: {a: 1, b: 1}
template: {$eval: '1 != 2'}
result: true
---
title: 'in-equality (3)'
context: {a: 1, b: 1}
template: {$eval: 'a != b'}
result: false
---
title: 'in-equality (4)'
context: {a: 1, b: 2}
template: {$eval: 'a != b'}
result: true
---
title: 'less than (1)'
context: {a: 1, b: 2}
template: {$eval: '1 < 2'}
result: true
---
title: 'less than (2)'
context: {a: 1, b: 2}
template: {$eval: '2 < 1'}
result: false
---
title: 'less than (3)'
context: {a: 1, b: 2}
template: {$eval: '"a" < "b"'}
result: true
---
title: 'less than (4)'
context: {a: 1, b: 2}
template: {$eval: '"b" < "a"'}
result: false
---
title: 'less than (5)'
context: {a: 1, b: 2}
template: {$eval: 'a < b'}
result: true
---
title: 'less than (6)'
context: {a: 1, b: 2}
template: {$eval: 'b < a'}
result: false
---
title: 'greater than (1)'
context: {a: 1, b: 2}
template: {$eval: '2 > 1'}
result: true
---
title: 'greater than (2)'
context: {a: 1, b: 2}
template: {$eval: '1 > 2'}
result: false
---
title: 'greater than (3)'
context: {a: 1, b: 2}
template: {$eval: '"b" > "a"'}
result: true
---
title: 'greater than (4)'
context: {a: 1, b: 2}
template: {$eval: '"a" > "b"'}
result: false
---
title: 'greater than (5)'
context: {a: 1, b: 2}
template: {$eval: 'b > a'}
result: true
---
title: 'greater than (6)'
context: {a: 1, b: 2}
template: {$eval: 'a > b'}
result: false
---
title: 'less than equal (1)'
context: {a: 1, b: 2}
template: {$eval: "a <= b"}
result: true
---
title: 'less than equal (2)'
context: {a: 1, b: 1}
template: {$eval: "a <= b"}
result: true
---
title: 'less than equal (3)'
context: {a: 1, b: 2}
template: {$eval: "b <= a"}
result: false
---
title: 'less than equal (4)'
context: {a: 1, b: 1}
template: {$eval: "b <= a"}
result: true
---
title: 'greater than equal (1)'
context: {a: 1, b: 2}
template: {$eval: "b >= a"}
result: true
---
title: 'greater than equal (2)'
context: {a: 1, b: 1}
template: {$eval: "a >= b"}
result: true
---
title: 'greater than equal (3)'
context: {a: 1, b: 2}
template: {$eval: "a >= b"}
result: false
---
title: 'greater than equal (4)'
context: {a: 1, b: 1}
template: {$eval: "a >= b"}
result: true
################################################################################
---
section: expression language - compound literals
---
title: 'parse list (1)'
context: {}
template: {$eval: '[1,2,3,4]'}
result: [1,2,3,4]
---
title: 'parse list (2)'
context: {}
template: {$eval: '[1,2,3,4][0]'}
result: 1
---
title: 'parse list (3)'
context: {}
template: {$eval: '[1,2,3,4][0:-1]'}
result: [1,2,3]
---
title: 'parse list (4)'
context: {}
template: {$eval: '[1,2,3,4'}
error: true
---
title: 'parse object (1)'
context: {key: 1}
template: {$eval: '{a: key, "b": key + 1}'}
result: {a: 1, b: 2}
---
title: 'parse object (2)'
context: {key: 1}
template: {$eval: '{"a": key, b: key + 1}'}
result: {a: 1, b: 2}
---
title: 'parse object (3)'
context: {key: 1}
template: {$eval: '{"a": key, "b": key + 1}'}
result: {a: 1, b: 2}
---
title: 'parse object (4)'
context: {key: 1}
template: {$eval: '{"a": key, b: [key,key+1,key+2]}'}
result: {a: 1, b: [1,2,3]}
---
title: 'parse object (5)'
context: {key: 1}
template: {$eval: '{a: key, "b": [key,key+1,key+2]}'}
result: {a: 1, b: [1,2,3]}
---
title: 'parse object (6)'
context: {key: 1}
template: {$eval: '{"a": key, "b": [key,key+1,key+2]}'}
result: {a: 1, b: [1,2,3]}
---
title: 'parse object (7)'
context: {key: 1}
template: {$eval: '{a: key, b: [key,key+1,key+2]}'}
result: {a: 1, b: [1,2,3]}
---
title: 'parse object (8)'
context: {key: 1}
template: {$eval: '{a: key, b: min(key + 1, 1)}'}
result: {a: 1, b: 1}
---
title: 'parse object (9)'
context: {key: 1}
template: {$eval: '{"a": key, b: min(key + 1, 1)}'}
result: {a: 1, b: 1}
---
title: 'parse object (10)'
context: {key: 1}
template: {$eval: '{a: key, "b": min(key + 1, 1)}'}
result: {a: 1, b: 1}
---
title: 'parse object (11)'
context: {key: 1}
template: {$eval: '{"a": key, "b": min(key + 1, 1)}'}
result: {a: 1, b: 1}
---
title: 'parse object (12)'
context: {key: 1}
template: {$eval: '{a: key, b: key + 1'}
error: true
################################################################################
---
section: expression language - errors
---
title: 'unary - type error'
context: {key: 'hello'}
template: {$eval: '-key'}
error: true
---
title: 'unary + type error'
context: {key: 'hello'}
template: {$eval: '+key'}
error: true
---
title: 'undefined variable'
context: {key: 'hello'}
template: {$eval: 'key2'}
error: true
---
title: 'missing closing parenthesis'
context: {key1: 1, key2: 1}
template: {$eval: 'key1 + (key2 + key1'}
error: true
---
title: 'missing opening parenthesis'
context: {key1: 1, key2: 1}
template: {$eval: 'key1 + key2 + key1)'}
error: true
---
title: 'missing closing "'
context: {}
template: {$eval: '"hello'}
error: true
---
title: 'missing opening "'
context: {}
template: {$eval: 'hello"'}
error: true
---
title: 'Infix + type error'
context: {}
template: {$eval: 'true + false'}
error: true
---
title: 'Infix - type error'
context: {}
template: {$eval: '"hello" - 3'}
error: true
---
title: 'Infix * type error'
context: {}
template: {$eval: '"hello" * 3'}
error: true
---
title: 'Infix / type error'
context: {}
template: {$eval: '"hello" / 3'}
error: true
---
title: 'Infix - type error'
context: {}
template: {$eval: '3 - "hello"'}
error: true
---
title: 'Infix * type error'
context: {}
template: {$eval: '3 * "hello"'}
error: true
---
title: 'Infix / type error'
context: {}
template: {$eval: '3 / "hello"'}
error: true
---
title: 'Infix ** type error'
context: {}
template: {$eval: '"hello" ** 3'}
error: true
---
title: 'Infix ** type error'
context: {}
template: {$eval: '3 ** "hello"'}
error: true
---
title: 'Infix < type error'
context: {}
template: {$eval: '"hello" < 3'}
error: true
---
title: 'Infix > type error'
context: {}
template: {$eval: '"hello" > 3'}
error: true
---
title: 'Infix <= type error'
context: {}
template: {$eval: '"hello" <= 3'}
error: true
---
title: 'Infix >= type error'
context: {}
template: {$eval: '"hello" >= 3'}
error: true
---
title: 'Infix < type error'
context: {}
template: {$eval: '3 < "hello"'}
error: true
---
title: 'Infix > type error'
context: {}
template: {$eval: '3 > "hello"'}
error: true
---
title: 'Infix <= type error'
context: {}
template: {$eval: '3 <= "hello"'}
error: true
---
title: 'Infix >= type error'
context: {}
template: {$eval: '3 >= "hello"'}
error: true
---
title: 'Prefix logical not type error'
context: {key: 'hello'}
template: {$eval: '!key'}
error: true
---
title: 'Infix or type error (1)'
context: {tt: true, key: 'hello'}
template: {$eval: 'tt || key'}
error: true
---
title: 'Infix or type error (2)'
context: {tt: true, key: 'hello'}
template: {$eval: 'key || tt'}
error: true
---
title: 'Infix and type error (1)'
context: {tt: true, key: 'hello'}
template: {$eval: 'tt && key'}
error: true
---
title: 'Infix and type error (2)'
context: {tt: true, key: 'hello'}
template: {$eval: 'key && tt'}
error: true
