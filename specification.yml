################################################################################
# ### Specificaiton for json-e
# This document specifies the json-e template language through a series of
# test cases on the form: `{title, context, template, result}`
# Where `jsone.render(template, context) = result` and title is short name
# for the test case. If `error` property is specified as `true`, no result needs
# to be specified, as the test case must throw an error.
#
# Comments explaining the test cases is encouraged, additionally entries with
# {section: '...'} is encouraged to separate sections.
#
# Test conditions:
#   1) Context is assumed to always functions:
#     - max(a, b)
#     - min(a, b)
#   2) Time at test time is expected to be '2017-01-19T16:27:20.974Z'
#   3) JSON is rendered to strings without whitespace and preserving order of
#      keys
################################################################################
---
section:  Initial Minimal Subset
---
title:    Identity
context:  {}
template: {key: [1,2,{key2: 'val', key3: 1}, true], f: false}
result:   {key: [1,2,{key2: 'val', key3: 1}, true], f: false}
---
title:    fromNow
context:  {}
template: {$fromNow: ''}
result:   '2017-01-19T16:27:20.974Z'
---
title:    fromNow 2 days 3 hours
context:  {}
template: {$fromNow: '2 days 3 hours'}
result:   '2017-01-21T19:27:20.974Z'
---
title:    $eval
context:  {key: ['value', 1, 2, true, {}]}
template: {$eval: 'key'}
result:   ['value', 1, 2, true, {}]
---
title:    $json
context:  {}
template: {$json: [1,2,true,{},[]]}
result:   '[1,2,true,{},[]]'
---
title:    string interpolation
context:  {key: 'world', num: 1}
template: {message: 'hello ${key}', 'k-${num}': true}
result:   {message: 'hello world', 'k-1': true}
---
title:    can't interpolate arrays
context:  {key: [1,2,3]}
template: {message: 'hello ${key}'}
error:    true #TODO: Decide if it should be interpolated as JSON
---
title:    can't interpolate objects
context:  {key: {}}
template: 'hello ${key}'
error:    true #TODO: Decide if it should be interpolated as JSON
---
title: invalid context (1)
context: {{a:2}: 1}
error: true
---
title: invalid context (2)
context: {'a b c': 1}
error: true
################################################################################
---
section:  $if-constructs
---
title:    $if-then-else, true
context:  {cond: true}
template: {$if: 'cond', then: 1, else: 2}
result:   1
---
title:    $if-then-else, false
context:  {cond: false}
template: {$if: 'cond', then: 1, else: 2}
result:   2
---
title:    $if-then in array, true
context:  {cond: true}
template: [0, {$if: 'cond', then: 1}]
result:   [0, 1]
---
title:    $if-then in array, false
context:  {cond: false}
template: [0, {$if: 'cond', then: 1}]
result:   [0] # missing else branch should return a delete-marker
---
title:    $if-then in object, true
context:  {cond: true}
template: {key: {$if: 'cond', then: 1}, k2: 3}
result:   {key: 1, k2: 3}
---
title:    $if-then in object, false
context:  {cond: false}
template: {key: {$if: 'cond', then: 1}, k2: 3}
result:   {k2: 3} # missing else branch should return a delete-marker
---
title:    $if -> delete-marker, true
context:  {cond: true}
template: {key: {$if: 'cond'}, k2: 3}
result:   {k2: 3} # missing then/else branches should return a delete-marker
---
title:    $if -> delete-marker, false
context:  {cond: false}
template: {key: {$if: 'cond'}, k2: 3}
result:   {k2: 3} # missing then/else branches should return a delete-marker
---
title: $if->then, then => $eval, true
context: {key: {b: 1}}
template: {$if: 'true', then: {$eval: 'key'}}
result: {b: 1}
---
title: $if->else, else => $eval, false
context: {key: {b: 1}}
template: {$if: 'false', else: {$eval: 'key'}}
result: {b: 1}
---
title: $if->then, then => ${}, true
context: {key: 'one'}
template: {$if: 'true', then: '${key}'}
result: 'one'
---
title: $if->else, else => ${}, false
context: {key: 'one'}
template: {$if: 'false', else: '${key}'}
result: 'one'
---
title: $if->then, then => object, true
context: {cond: true}
template: {$if: 'cond', then: {key: 'hello world'}}
result: {key: 'hello world'}
---
title: $if->else, else => object, false
context: {cond: false}
template: {$if: 'cond', else: {key: 'hello world'}}
result: {key: 'hello world'}
---
title: $if->then, then => object, $eval, true
context: {cond: true, key: 'hello world'}
template: {$if: 'cond', then: {key: {$eval: 'key'}}}
result: {key: 'hello world'}
---
title: $if->else, else => object, $eval, false
context: {cond: false, key: 'hello world'}
template: {$if: 'cond', else: {key: {$eval: 'key'}}}
result: {key: 'hello world'}
---
title: $if->then, then => object, interpolation, true
context: {cond: true, key: 'world'}
template: {$if: 'cond', then: {key: 'hello ${key}'}}
result: {key: 'hello world'}
---
title: $if->else, else => object, interpolation, false
context: {cond: false, key: 'world'}
template: {$if: 'cond', else: {key: 'hello ${key}'}}
result: {key: 'hello world'}
################################################################################
---
section:  fromNow
---
title:    fromNow 1 hour
context:  {}
template: {$fromNow: '1 hour'}
result:   '2017-01-19T17:27:20.974Z'
---
title:    fromNow 2 hours
context:  {}
template: {$fromNow: '2 hours'}
result:   '2017-01-19T18:27:20.974Z'
---
title:    fromNow 3h
context:  {}
template: {$fromNow: '3h'}
result:   '2017-01-19T19:27:20.974Z'
---
title:    fromNow 1 hours
context:  {}
template: {$fromNow: '1 hours'}
result:   '2017-01-19T17:27:20.974Z'
---
title:    fromNow -1 hour
context:  {}
template: {$fromNow: '-1 hour'}
result:   '2017-01-19T15:27:20.974Z'
---
title:    fromNow 1 m
context:  {}
template: {$fromNow: '1 m'}
result:   '2017-01-19T16:28:20.974Z'
---
title:    fromNow 1m
context:  {}
template: {$fromNow: '1m'}
result:   '2017-01-19T16:28:20.974Z'
---
title:    fromNow 12 min
context:  {}
template: {$fromNow: '12 min'}
result:   '2017-01-19T16:39:20.974Z'
---
title:    fromNow 12min
context:  {}
template: {$fromNow: '12min'}
result:   '2017-01-19T16:39:20.974Z'
---
title:    fromNow 11m
context:  {}
template: {$fromNow: '11m'}
result:   '2017-01-19T16:38:20.974Z'
---
title:    fromNow 11 m
context:  {}
template: {$fromNow: '11 m'}
result:   '2017-01-19T16:38:20.974Z'
---
title:    fromNow 1 day
context:  {}
template: {$fromNow: '1 day'}
result:   '2017-01-20T16:27:20.974Z'
################################################################################
---
section:  expression language
---
title:    addition
context:  {a: 1, b: 2}
template: {$eval: 'a + b + 7'}
result:   10
---
title:    multiplication
context:  {a: 3, b: 2}
template: {$eval: 'a * b * 3'}
result:   18
---
title:    string concatenation (1)
context:  {a: 3, b: 2}
template: {$eval: '"a" + "b"'}
result:   'ab'
---
title:    string concatenation (2)
context:  {a: 3, b: 2}
template: {$eval: '"a" + b'}
result:   'a2'
---
title:    string concatenation (3)
context:  {a: 3, b: 2}
template: {$eval: '"" + a + b'}
result:   '32'
---
title:    string concatenation (4)
context:  {a: 3, b: 2}
template: {$eval: '"" + (a + b)'}
result:   '5'
---
title:    $eval must take string
context:  {a: 3, b: 2}
template: {$eval: ['a', 'b']}
error:    true
---
title: array access [index]
context: {a: [1,2,3,4]}
template: {$eval: 'a[0]'}
result: 1
---
title: array access [index]
context: {a: [1,2,3,4]}
template: {$eval: 'a[2]'}
result: 3
---
title: array access [-index]
context: {a: [1,2,3,4]}
template: {$eval: 'a[-1]'}
result: 4
---
title: array access [-index]
context: {a: [1,2,3,4]}
template: {$eval: 'a[-2]'}
result: 3
---
title: array slicing [begin:end], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[0:2]'}
result: [1,2]
---
title: array slicing [begin:], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[0:]'}
result: [1,2,3,4]
---
title: array slicing [begin:], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[1:]'}
result: [2,3,4]
---
title: array slicing [-begin:], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[-3:]'}
result: [2,3,4]
---
title: array slicing [-begin:-end], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[-3:-1]'}
result: [2,3]
---
title: array slicing [:end], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[:3]'}
result: [1,2,3]
---
title: array slicing [:-end], [begin, end)
context: {a: [1,2,3,4]}
template: {$eval: 'a[:-2]'}
result: [1,2]
---
title: function min(contextValue, contextValue)
context: {a: 1, b: 2}
template: {$eval: 'min(a, b)'}
result: 1
---
title: function max(contextValue, contextValue)
context: {a: 1, b: 2}
template: {$eval: 'max(a, b)'}
result: 2
---
title: function min(contextValue, value)
context: {a: 1, b: 2}
template: {$eval: 'min(a, -1)'}
result: -1
---
title: function max(contextValue, value)
context: {a: 1, b: 2}
template: {$eval: 'max(a, 3)'}
result: 3
################################################################################
---
section:  $json
---
title:    wrap expressions with $eval
context:  {a: 1, b: 2}
template: {$json: {$eval: 'a + b + 7'}}
result:   '10'
---
title:    unwrap expressions not evaluated
context:  {a: 1, b: 2}
template: {$json: 'a + b + 7'}
result:   '"a + b + 7"'
---
title:    $eval inside array
context:  {a: 1, b: 2}
template: {$json: [2, 5, {$eval: 'a + b + 7'}]}
result:   '[2,5,10]'
################################################################################
---
section: accessing nested objects => context
---
title: $eval
context:  {key: {key2: ['value', 1, 2, true, {}]}}
template: {$eval: 'key.key2'}
result:   ['value', 1, 2, true, {}]
---
title:    $json
context:  {key: {key2: [1,2,true,{},[]]}}
template: {$json: {$eval: 'key.key2'}}
result:   '[1,2,true,{},[]]'
---
title: string interpolation
context: {key: {key2: 'world', key3: 1}}
template: {message: 'hello ${key.key2}', 'k-${key.key3}': true}
result:   {message: 'hello world', 'k-1': true}
################################################################################
---
section:  $map
---
title:    simple map
context:  {a: 1}
template:
  $map: [2, 4, 6]
  each(x): {$eval: 'x + a'}
result:   [3, 5, 7]
---
title:    map to objects
context:  {a: 1}
template:
  $map: [2, 4, 6]
  each(x):
    asText: '${x + a}'
    integer: {$eval: 'x + a'}
result:
 - {asText: '3', integer: 3}
 - {asText: '5', integer: 5}
 - {asText: '7', integer: 7}
---
title:    complex identifier
context:  {a: 1}
template:
  $map: [2, 4, 6]
  each(my_identifier97): {$eval: 'my_identifier97 + a'}
result:   [3, 5, 7]
---
title:    must wrap expressions with $eval
context:  {a: 1}
template:
  $map: [2, 4, 6]
  each(my_identifier97): 'my_identifier97 + a'
result:   ['my_identifier97 + a', 'my_identifier97 + a', 'my_identifier97 + a']
---
title:    can take from objects
context:  {a: 1}
template:
  $map: [{k: 1}, {k: 2}, {k: 3}]
  each(y): {$eval: 'y.k'}
result:   [1, 2, 3]
---
title:    can make objects too
context:  {a: 1}
template:
  $map: [{k: 1}, {k: 2}, {k: 3}]
  each(y):
    k: {$eval: 'y.k + 1'}
    v: 'before=${y.k}'
result:
  - k: 2
    v: 'before=1'
  - k: 3
    v: 'before=2'
  - k: 4
    v: 'before=3'
---
title:    respects delete-marker from $if
context:  {a: 1}
template:
  $map: [{k: 1}, {k: 2}, {k: 3}]
  each(y):
    $if: 'y.k != 2'
    then: {$eval: 'y.k'} 
result: [1, 3]
---
title:    $map requires an array
context:  {}
template:
  $map: {a: 1, b: 2, c: 3}
  each(y): {$eval: 'y.k'}
error: true # can't do map on non-arrays
################################################################################
---
section:  $sort
---
title:    simple sort
context:  {}
template: {$sort: [3, 4, 1, 2]}
result:   [1, 2, 3, 4]
---
title:    simple sort with $eval
context:  {array: [3, 4, 1, 2]}
template: {$sort: {$eval: 'array'}}
result:   [1, 2, 3, 4]
---
title:    sort by
context:  {}
template:
  $sort: [{a: 2}, {a: 1, b: []}, {a: 3}]
  by(x): 'x.a'
result:   [{a: 1, b: []}, {a: 2}, {a: 3}]
---
title:    cannot sort objects without by
context:  {}
template:
  $sort: [{a: 2}, {a: 1, b: []}, {a: 3}]
error: true  # list of objects must have a 'by(x)' property
---
title:    cannot sort arrays without by
context:  {}
template:
  $sort: [[1,2,3], [4,5], [], [8,9,10]]
error: true  # list of arrays must have a 'by(x)' property
---
title:    sort requires an array (string)
context:  {}
template:
  $sort:  "some string"
error: true  # $sort must be given an array
---
title:    sort requires an array (number)
context:  {}
template:
  $sort:  34
error: true  # $sort must be given an array
---
title:    sort requires an array (object)
context:  {}
template:
  $sort:  {k: 1, b: 4, x: 8}
error: true  # $sort must be given an array
################################################################################
---
section:  $reverse
---
title:    simple reverse
context:  {}
template: {$reverse: [3, 4, 1, 2]}
result:   [2, 1, 4, 3]
---
title:    simple reverse with $eval
context:  {key: [3, 4, 1, 2]}
template: {$reverse: {$eval: 'key'}}
result:   [2, 1, 4, 3]
---
title:    simple reverse + $sort # with this we can sort in reverse order
context:  {}
template: {$reverse: {$sort: [3, 4, 1, 2]}}
result:   [4, 3, 2, 1]
################################################################################
